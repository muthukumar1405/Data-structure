class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class DeleteStart:
    def __init__(self):
        self.head=None
        self.tail=None
    def addNode(self,data):
        newnode=Node(data)
        if(self.head==None):
            self.head=self.tail=newnode
            self.head.previous=None
            self.tail.next=None
        else:
            self.tail.next=newnode
            newnode.previous=self.tail
            self.tail=newnode
            self.tail.next=None
    def deleteFromstart(self,key):
        temp = self.head 
  
        # If head node itself holds the key to be deleted 
        if (temp is not None): 
            if (temp.data == key): 
                self.head = temp.next
                temp = None
                return
  
        # Search for the key to be deleted, keep track of the 
        # previous node as we need to change 'prev.next' 
        while(temp is not None): 
            if temp.data == key: 
                break 
            prev = temp 
            temp = temp.next 
  
        # if key was not present in linked list 
        if(temp == None): 
            return 
  
        # Unlink the node from linked list 
        prev.next = temp.next 
  
        temp = None 
    def display(self):
        current=self.head;
        if(self.head==None):
            print("List is empty")
        while(current!=None):
            print(current.data,end=' ')
            current=current.next
        print()
dlist=DeleteStart()
dlist.addNode(1)
dlist.addNode(2)
dlist.addNode(3)
dlist.addNode(4)
print("Original list: ")
dlist.display();
while(dlist.head !=None):
    current=dlist.head;
    if(dlist.head==None):
        exit()
    while(current!=None):
        print(current.data,end=' ')
        dlist.deleteFromstart(current.data)
        current=current.next
        dlist.display()
    exit()
